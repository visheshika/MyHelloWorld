# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 16:04:01 2019
Generate a ZapperGUI settings.conf plaintext file
  with an autogenerated grid of coordinates

@author: GeorgeTaylor
"""

from pathlib import Path # for manipulating paths and files
import json # for writing json files

# gamma routines and test
def emit(coords):
    '''Write a list of coords as JSON values

    Keyword arguments:
        coords -- A list of coords
    Returns:
        None
    '''
    # input is coords, a list of sublists, each sublist is coords for a box
    curr_pos = 1 # the starting 'position' for dictionary
    curr_sample = 1
    
#          {
#        "Sample": 1,
#        "Position": 1,
#        "X": 170,
#        "Y": 111,
#      },
    coords_dict = {}
                  
  # for sample in coords:
   #     for coord in sample:
   #         # we have one list of length two with x, y
    #        coord_dict = { 'Sample' : str(curr_sample), 'Position' : curr_pos, 'X' : coord[0], 'Y' : coord[1]}
     #       print(coord_dict)
      #      coords_dict.update(coord_dict) # there is bug here, we have to add each line to the full dictionary
       #     curr_pos += 1
       # curr_sample += 1
        
    #print(coords_dict)


def Convert(coords):
    res_dct = {coords[i]: coords[i + 1] for i in range(0, len(coords), 2)}

#     print(Convert(coords))


# this line prevents the main code from being executed when it's imported
# for example, it prevents pydoc from running the module while extracting documentation
if __name__ == '__main__':
    # find my current directory
    BASE_DIR = Path(__file__).resolve().parent
    
    # define the number of grid points in X
    grid_x = 3

    
    # define the number of grid points in Y
    grid_y = 3
    
    # define the sample areas as opposing corners of boxes
    box1 = [[0,111], [61, 172]]
    box2 = [[170,111], [234,172]]
    boxes = [box1, box2]
    sample = 1 # starting sample
    coords = list()


    for box in boxes:
        w = box[1][0] - box[0][0] # bottom left minus bottom right
        h = box[1][1] - box[0][1] # left top minus left right
        x_left = box[0][0]
        y_bottom = box[0][1]
        sample_coords = [] # reset coords for this box/sample
        print(x_left)

        # iterate over the grid points
        for y in range(grid_y):
            coords_row=list()
            # calculate current y coord
            curr_y = round(h * y / (grid_y - 1) + y_bottom)
            
            for x in range(grid_x):
                # calculate current x coord
                curr_x = round(w * x / (grid_x - 1) + x_left)
                #print(f"y={y}, x={x}, curr_x={curr_x}, curr_y={curr_y}, w={w}, h={h}")
                #print([curr_x, curr_y])
                coords_row.append([curr_x, curr_y])
            
            # zip alternate rows for zig zag path
            if y%2 == 1:
                coords_row.reverse()
            for coord in coords_row:
                sample_coords.append(coord)
            
        coords += [sample_coords]
    #print(coords)
    
    # write coords to JSON
    emit(coords)
    
    