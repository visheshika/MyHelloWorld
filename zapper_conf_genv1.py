# -*- coding: utf-8 -*-
"""
Created on Tue Dec 10 16:04:01 2019
Generate a ZapperGUI settings.conf plaintext file
  with an autogenerated grid of coordinates

@author: GeorgeTaylor
"""
import json
from pathlib import Path # for manipulating paths and files

# gamma routines and test
def emit(coords):
    '''Write a list of coords as JSON values

    Keyword arguments:
        coords -- A list of coords
    Returns:
        None
    '''


# this line prevents the main code from being executed when it's imported
# for example, it prevents pydoc from running the module while extracting documentation
if __name__ == '__main__':
    # find my current directory
    BASE_DIR = Path(__file__).resolve().parent
    
    # define the number of grid points in X
    grid_x = 3
    
    # define the number of grid points in Y
    grid_y = 3
    
    # define the sample areas as opposing corners of boxes
    box1 = [[0,0], [65, 173]]
    box2 = [[173,0], [236,173]]
    boxes = [box1, box2]
    sample = 1 # starting sample
    
    for box in boxes:
        w = box[1][0] - box[0][0]
        h = box[1][1] - box[0][1]
        x_left = box[0][0]
        y_bottom = box[0][1]
        coords = list()

        # iterate over the grid points
        for y in range(grid_y):
            coords_row=list()
            # calcuate current y coord
            curr_y = h * y / (grid_y - 1) + y_bottom
            
            for x in range(grid_x):
                # read box coordinates
                curr_x = w * x / (grid_x - 1) + x_left
                #print(f"y={y}, x={x}, curr_x={curr_x}, curr_y={curr_y}, w={w}, h={h}")
                print([curr_x, curr_y])


                coords_row.append([curr_x, curr_y])
            
            # zip alternate rows for zig zag path
            if y%2 == 1:
                coords_row.reverse()
            coords.append(coords_row)



        # a Python object (dict):
        mydict = {
            "samp": sample,
            "pos": position,
            "x": curr_x,
            "y": curr_y
        }

        # convert into JSON:
        print(json.dumps(mydict))


        # the result is a JSON string:
        print(y)

        emit(coords)